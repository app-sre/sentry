---
apiVersion: v1
kind: Template
metadata:
  name: sentry-deps
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: redis
      service: sentry
    name: redis
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-component: redis
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-component: redis
      spec:
        containers:
        - name: redis
          image: ${REDIS_IMAGE}:${REDIS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      sentry-component: redis
      service: sentry
    name: redis
  spec:
    type: ClusterIP
    ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      sentry-component: redis
    sessionAffinity: None
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      sentry-component: redis
      service: sentry
    name: redis
  stringData:
    endpoint: redis
    port: "6379"
    auth_token:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: zookeeper
      service: sentry
    name: zookeeper
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-component: zookeeper
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-component: zookeeper
      spec:
        containers:
        - name: zookeeper
          image: ${ZOOKEEPER_IMAGE}:${ZOOKEEPER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          env:
          - name: ZOOKEEPER_CLIENT_PORT
            value: "2181"
          - name: ZOOKEEPER_LOG4J_ROOT_LOGLEVEL
            value: WARN
          - name: ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL
            value: WARN
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      sentry-component: zookeeper
      service: sentry
    name: zookeeper
  spec:
    type: ClusterIP
    ports:
    - port: 2181
      protocol: TCP
      targetPort: 2181
    selector:
      sentry-component: zookeeper
    sessionAffinity: None
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: kafka
      service: sentry
    name: sentry-kafka
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-component: kafka
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-component: kafka
      spec:
        containers:
        - name: kafka
          image: ${KAFKA_IMAGE}:${KAFKA_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          env:
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zookeeper:2181"
          - name: KAFKA_LISTENERS
            value: "PLAINTEXT://:9092"
          - name:  KAFKA_ADVERTISED_LISTENERS
            value: "PLAINTEXT://${KAFKA_SERVICE}:9092"
          - name:  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: "1"
          - name: KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS
            value: "1"
          - name: KAFKA_LOG_RETENTION_HOURS
            value: "24"
          - name: CONFLUENT_SUPPORT_METRICS_ENABLE
            value: "false"
          - name: KAFKA_LOG4J_LOGGERS
            value: "kafka.cluster=WARN,kafka.controller=WARN,kafka.coordinator=WARN,kafka.log=WARN,kafka.server=WARN,kafka.zookeeper=WARN,state.change.logger=WARN"
          - name: KAFKA_LOG4J_ROOT_LOGLEVEL
            value: WARN
          - name: KAFKA_TOOLS_LOG4J_LOGLEVEL
            value: WARN
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      sentry-component: kafka
      service: sentry
    name: ${KAFKA_SERVICE}
  spec:
    type: ClusterIP
    ports:
    - port: ${{KAFKA_SERVICE_PORT}}
      protocol: TCP
      targetPort: 9092
    selector:
      sentry-component: kafka
    sessionAffinity: None
- kind: Job
  apiVersion: batch/v1
  metadata:
    name: postgres-enable-citext
  spec:
    template:
      spec:
        containers:
        - name: postgres-enable-citext
          image: ${POSTGRES_IMAGE}:${POSTGRES_IMAGE_TAG}
          imagePullPolicy: Always
          env:
          - name: POSTGRES_SERVER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          command:
            - "/bin/bash"
            - "-ecx"
            - |
              export PGPASSWORD="${POSTGRES_ADMIN_PW}"
              psql -h $POSTGRES_SERVER -d $DB_NAME -U postgres -c "CREATE EXTENSION citext;"
        restartPolicy: OnFailure
        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      sentry-component: relay
      service: sentry
    name: relay
  stringData:
    RELAY_ID: ${RELAY_ID}
    RELAY_SECRET_KEY: ${RELAY_SECRET_KEY}
    RELAY_PUBLIC_KEY: ${RELAY_PUBLIC_KEY}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-init
  stringData:
    SENTRY_INITIAL_EMAIL: ${SENTRY_INITIAL_EMAIL}
    SENTRY_INITIAL_PASSWORD: ${SENTRY_INITIAL_PASSWORD}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-general
  stringData:
    SENTRY_ENABLE_EMAIL_REPLIES: "false"
    SENTRY_FILESTORE_DIR: /tmp/sentry-files
    SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
    SENTRY_SERVER_EMAIL: ${SENTRY_SERVER_EMAIL}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-github-oauth
  data:
    GITHUB_API_SECRET: ${GITHUB_API_SECRET}
    GITHUB_APP_ID: ${GITHUB_APP_ID}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: smtp
  data:
    server:
    password:
    username:
    port:
    require_tls:
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      sentry-component: postgres
      service: sentry
    name: sentry-rds
  stringData:
    db.host: postgresql
    db.port: "5432"
    db.user: ${POSTGRES_USER}
    db.password: ${POSTGRES_PASSWORD}
    db.name: sentry
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${SERVICE_ACCOUNT}
  imagePullSecrets:
    - name: quay.io
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: sentry-kafka-service
  stringData:
    bootstrapServerHost: ${KAFKA_SERVICE}
parameters:
- name: KAFKA_IMAGE
  value: quay.io/cloudservices/cp-kafka
- name: KAFKA_IMAGE_TAG
  value: 5.5.0
- name: RELAY_ID
  displayName: Secret Relay ID
  description: This is the unique client ID for the relay to help identify the source
  required: true
- name: RELAY_SECRET_KEY
  displayName: Sentry Relay Secret Key
  description: secret key used by relay instance
  required: true
- name: RELAY_PUBLIC_KEY
  displayName: Sentry Relay Public Key
  description: public key used by relay instance
  required: true
- name: SENTRY_INITIAL_EMAIL
  value: tester@fake.com
- name: SENTRY_INITIAL_PASSWORD
  value: test
- name: SENTRY_SECRET_KEY
  required: true
- name: SENTRY_SERVER_EMAIL
  value: tester@sentrytest.com
- name: GITHUB_API_SECRET
  value: ""
- name: GITHUB_APP_ID
  value: ""
- name: POSTGRES_USER
  value: sentry
- name: POSTGRES_PASSWORD
  value: secret
- name: KAFKA_SERVICE
  value: sentry-kafka
  displayName: kafka service name
  description: name of the kafka service
- name: KAFKA_SERVICE_PORT
  value: "9092"
  displayName: kafka port
  description: port number kafka listens on for client connections
- name: REDIS_IMAGE
  value: quay.io/app-sre/redis-5
- name: REDIS_IMAGE_TAG
  value: latest
- name: ZOOKEEPER_IMAGE
  value: quay.io/cloudservices/cp-zookeeper
- name: ZOOKEEPER_IMAGE_TAG
  value: "5.5.0"
- name: POSTGRES_IMAGE
  value: quay.io/app-sre/postgres
- name: POSTGRES_IMAGE_TAG
  value: "9.6"
- name: POSTGRES_ADMIN_PW
  value: admin
- name: SERVICE_ACCOUNT
  value: sentry
  deplayName: sentry service account
  description: name of the service account to use when deploying the pod
