---
apiVersion: v1
kind: Template
metadata:
  name: sentry
objects:
# Sentry
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-cron
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: cron
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: cron
      spec:
        containers:
        - name: sentry-cron
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - sentry
          - run
          - cron
          env:
          - name: SENTRY_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: SENTRY_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.port
          - name: SENTRY_DB_USER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.user
          - name: SENTRY_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.password
          - name: SENTRY_DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          - name: SENTRY_EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: smtp
                key: server
          - name: SENTRY_EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp
                key: password
          - name: SENTRY_EMAIL_USER
            valueFrom:
              secretKeyRef:
                name: smtp
                key: username
          - name: SENTRY_EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: smtp
                key: port
          - name: SENTRY_EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: smtp
                key: require_tls
          - name: SNUBA
            value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
          - name: SENTRY_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: SENTRY_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: SENTRY_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          envFrom:
          - configMapRef:
              name: sentry
          - secretRef:
              name: sentry-github-oauth
          - secretRef:
              name: sentry-general
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: ${SENTRY_SERVICE}
  spec:
    replicas: 2
    selector:
      matchLabels:
        sentry-task: web
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: web
      spec:
        containers:
        - name: sentry-web
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - sentry
          - run
          - web
          env:
          - name: SENTRY_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: SENTRY_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.port
          - name: SENTRY_DB_USER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.user
          - name: SENTRY_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.password
          - name: SENTRY_DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          - name: SENTRY_EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: smtp
                key: server
          - name: SENTRY_EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp
                key: password
          - name: SENTRY_EMAIL_USER
            valueFrom:
              secretKeyRef:
                name: smtp
                key: username
          - name: SENTRY_EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: smtp
                key: port
          - name: SENTRY_EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: smtp
                key: require_tls
          - name: SNUBA
            value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
          - name: SENTRY_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: SENTRY_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: SENTRY_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          envFrom:
          - configMapRef:
              name: sentry
          - secretRef:
              name: sentry-github-oauth
          - secretRef:
              name: sentry-general
          ports:
          - containerPort: 9000
            protocol: TCP
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-worker
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: worker
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: worker
      spec:
        containers:
        - name: sentry-worker
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - sentry
          - run
          - worker
          env:
          - name: SENTRY_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: SENTRY_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.port
          - name: SENTRY_DB_USER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.user
          - name: SENTRY_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.password
          - name: SENTRY_DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          - name: SENTRY_EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: smtp
                key: server
          - name: SENTRY_EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp
                key: password
          - name: SENTRY_EMAIL_USER
            valueFrom:
              secretKeyRef:
                name: smtp
                key: username
          - name: SENTRY_EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: smtp
                key: port
          - name: SENTRY_EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: smtp
                key: require_tls
          - name: C_FORCE_ROOT
            value: "TRUE"
          - name: SNUBA
            value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
          - name: SENTRY_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: SENTRY_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: SENTRY_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          envFrom:
          - configMapRef:
              name: sentry
          - secretRef:
              name: sentry-github-oauth
          - secretRef:
              name: sentry-general
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-ingest-consumer
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: ingest-consumer
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: ingest-consumer
      spec:
        containers:
        - name: sentry-ingest-consumer
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - sentry
          - run
          - ingest-consumer
          - --all-consumer-types
          env:
          - name: SENTRY_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: SENTRY_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.port
          - name: SENTRY_DB_USER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.user
          - name: SENTRY_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.password
          - name: SENTRY_DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          - name: SENTRY_EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: smtp
                key: server
          - name: SENTRY_EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp
                key: password
          - name: SENTRY_EMAIL_USER
            valueFrom:
              secretKeyRef:
                name: smtp
                key: username
          - name: SENTRY_EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: smtp
                key: port
          - name: SENTRY_EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: smtp
                key: require_tls
          - name: SNUBA
            value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
          - name: SENTRY_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: SENTRY_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: SENTRY_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          envFrom:
          - configMapRef:
              name: sentry
          - secretRef:
              name: sentry-github-oauth
          - secretRef:
              name: sentry-general
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-post-process-forwarder
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: post-process-forwarder
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: post-process-forwarder
      spec:
        containers:
        - name: sentry-post-process-forwarder
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - sentry
          - run
          - post-process-forwarder
          - --commit-batch-size=1
          env:
          - name: SENTRY_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: SENTRY_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.port
          - name: SENTRY_DB_USER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.user
          - name: SENTRY_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.password
          - name: SENTRY_DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          - name: SENTRY_EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: smtp
                key: server
          - name: SENTRY_EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp
                key: password
          - name: SENTRY_EMAIL_USER
            valueFrom:
              secretKeyRef:
                name: smtp
                key: username
          - name: SENTRY_EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: smtp
                key: port
          - name: SENTRY_EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: smtp
                key: require_tls
          - name: SNUBA
            value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
          - name: SENTRY_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: SENTRY_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: SENTRY_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          envFrom:
          - configMapRef:
              name: sentry
          - secretRef:
              name: sentry-github-oauth
          - secretRef:
              name: sentry-general
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-subscription-consumer-events
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: subscription-consumer-events
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: subscription-consumer-events
      spec:
        containers:
        - name: sentry-subscription-consumer-events
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - sentry
          - run
          - query-subscription-consumer
          - --commit-batch-size=1 
          - --topic=events-subscription-results
          env:
          - name: SENTRY_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: SENTRY_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.port
          - name: SENTRY_DB_USER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.user
          - name: SENTRY_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.password
          - name: SENTRY_DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          - name: SENTRY_EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: smtp
                key: server
          - name: SENTRY_EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp
                key: password
          - name: SENTRY_EMAIL_USER
            valueFrom:
              secretKeyRef:
                name: smtp
                key: username
          - name: SENTRY_EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: smtp
                key: port
          - name: SENTRY_EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: smtp
                key: require_tls
          - name: SNUBA
            value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
          - name: SENTRY_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: SENTRY_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: SENTRY_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          envFrom:
          - configMapRef:
              name: sentry
          - secretRef:
              name: sentry-github-oauth
          - secretRef:
              name: sentry-general
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: sentry-subscription-consumer-transactions
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: subscription-consumer-transactions
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: subscription-consumer-transactions
      spec:
        containers:
        - name: sentry-subscription-consumer-transactions
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - sentry
          - run
          - query-subscription-consumer
          - --commit-batch-size=1 
          - --topic=transactions-subscription-results
          env:
          - name: SENTRY_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: SENTRY_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.port
          - name: SENTRY_DB_USER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.user
          - name: SENTRY_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.password
          - name: SENTRY_DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          - name: SENTRY_EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: smtp
                key: server
          - name: SENTRY_EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp
                key: password
          - name: SENTRY_EMAIL_USER
            valueFrom:
              secretKeyRef:
                name: smtp
                key: username
          - name: SENTRY_EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: smtp
                key: port
          - name: SENTRY_EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: smtp
                key: require_tls
          - name: SNUBA
            value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
          - name: SENTRY_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: SENTRY_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: SENTRY_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          envFrom:
          - configMapRef:
              name: sentry
          - secretRef:
              name: sentry-github-oauth
          - secretRef:
              name: sentry-general
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      sentry-component: cleanup
      service: sentry
    name: cleanup
  spec:
    successfulJobsHistoryLimit: 5
    failedJobsHistoryLimit: 1
    schedule: "0 0 * * *"
    concurrencyPolicy: Forbid
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              sentry-task: cleanup
          spec:
            containers:
            - name: sentry-cleanup
              image: ${IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              command:
              - sentry
              - cleanup
              - --days=${CLEANUP_DAYS}
              env:
              - name: SENTRY_POSTGRES_HOST
                valueFrom:
                   secretKeyRef:
                     name: sentry-rds
                     key: db.host
              - name: SENTRY_POSTGRES_PORT
                valueFrom:
                   secretKeyRef:
                     name: sentry-rds
                     key: db.port
              - name: SENTRY_DB_USER
                valueFrom:
                   secretKeyRef:
                     name: sentry-rds
                     key: db.user
              - name: SENTRY_DB_PASSWORD
                valueFrom:
                   secretKeyRef:
                     name: sentry-rds
                     key: db.password
              - name: SENTRY_DB_NAME
                valueFrom:
                  secretKeyRef:
                    name: sentry-rds
                    key: db.name
              - name: SENTRY_EMAIL_HOST
                valueFrom:
                  secretKeyRef:
                    name: smtp
                    key: server
              - name: SENTRY_EMAIL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: smtp
                    key: password
              - name: SENTRY_EMAIL_USER
                valueFrom:
                  secretKeyRef:
                    name: smtp
                    key: username
              - name: SENTRY_EMAIL_PORT
                valueFrom:
                  secretKeyRef:
                    name: smtp
                    key: port
              - name: SENTRY_EMAIL_USE_TLS
                valueFrom:
                  secretKeyRef:
                    name: smtp
                    key: require_tls
              - name: SNUBA
                value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
              - name: SENTRY_REDIS_HOST
                valueFrom:
                  secretKeyRef:
                    name: ${REDIS_SECRET}
                    key: endpoint
              - name: SENTRY_REDIS_PORT
                valueFrom:
                  secretKeyRef:
                    name: ${REDIS_SECRET}
                    key: port
              - name: SENTRY_REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${REDIS_SECRET}
                    key: auth_token
              envFrom:
              - configMapRef:
                  name: sentry
              - secretRef:
                  name: sentry-github-oauth
              - secretRef:
                  name: sentry-general
              resources:
                limits:
                  cpu: 1000m
                  memory: 1024Mi
                requests:
                  cpu: 100m
                  memory: 512Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: OnFailure
            schedulerName: default-scheduler
            securityContext: {}
            terminationGracePeriodSeconds: 30
#            serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      service: sentry
    name: sentry
  stringData:
    SENTRY_SINGLE_ORGANIZATION: "${SENTRY_SINGLE_ORGANIZATION}"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      sentry-component: sentry
      service: sentry
    name: ${SENTRY_SERVICE}
  spec:
    type: ClusterIP
    ports:
    - name: http
      port: ${{SENTRY_SERVICE_PORT}}
      protocol: TCP
      targetPort: 9000
    selector:
      sentry-task: web
    sessionAffinity: None
#- apiVersion: v1
#  kind: ServiceAccount
#  metadata:
#    name: ${SERVICE_ACCOUNT}
#  imagePullSecrets:
#    - name: quay.io

# Relay
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: relay
      service: sentry
    name: relay
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: relay
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: relay
      spec:
        containers:
        - name: relay
          image: ${RELAY_IMAGE}:${RELAY_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - relay
          - run
          - -c
          - /etc/relay
          env:
          - name: SENTRY_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.host
          - name: SENTRY_POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.port
          - name: SENTRY_DB_USER
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.user
          - name: SENTRY_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.password
          - name: SENTRY_DB_NAME
            valueFrom:
              secretKeyRef:
                name: sentry-rds
                key: db.name
          - name: SENTRY_EMAIL_HOST
            valueFrom:
              secretKeyRef:
                name: smtp
                key: server
          - name: SENTRY_EMAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp
                key: password
          - name: SENTRY_EMAIL_USER
            valueFrom:
              secretKeyRef:
                name: smtp
                key: username
          - name: SENTRY_EMAIL_PORT
            valueFrom:
              secretKeyRef:
                name: smtp
                key: port
          - name: SENTRY_EMAIL_USE_TLS
            valueFrom:
              secretKeyRef:
                name: smtp
                key: require_tls
          - name: SNUBA
            value: http://${SNUBA_API_SERVICE}:${SNUBA_API_SERVICE_PORT}
          - name: SENTRY_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: SENTRY_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: SENTRY_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          envFrom:
          - configMapRef:
              name: sentry
          - secretRef:
              name: sentry-github-oauth
          - secretRef:
              name: sentry-general
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          volumeMounts:
          - name: relay-config
            mountPath: /etc/relay/config.yml
            subPath: config.yml
          - name: relay-credentials
            mountPath: /etc/relay/credentials.json
            subPath: credentials.json
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        volumes:
        - name: relay-config
          configMap:
            name: ${RELAY_CONFIG_CONFIGMAP}
            items:
            - key: config.yml
              path: config.yml
        - name: relay-credentials
          secret:
            secretName: ${RELAY_CREDENTIALS_SECRET}
            items:
            - key: credentials.json
              path: credentials.json
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      sentry-component: relay
      service: sentry
    name: relay-config
  data:
    config.yml: |
      relay:
        upstream: "http://${SENTRY_SERVICE}:${SENTRY_SERVICE_PORT}/"
        host: 0.0.0.0
        port: ${RELAY_SERVICE_PORT}
      logging:
        level: WARN
      processing:
        enabled: true
        kafka_config:
          - {name: "bootstrap.servers", value: "${KAFKA_SERVICE}:${KAFKA_SERVICE_PORT}"}
        redis: redis://${REDIS_SERVICE}:${REDIS_SERVICE_PORT}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      sentry-component: relay
      service: sentry
    name: ${RELAY_SERVICE}
  spec:
    type: ClusterIP
    ports:
    - name: http
      port: ${{RELAY_SERVICE_PORT}}
      protocol: TCP
      targetPort: 3000
    selector:
      sentry-task: relay
    sessionAffinity: None

# Nginx
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: nginx
      service: sentry
    name: nginx
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: nginx
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: nginx
      spec:
        containers:
        - name: nginx
          image: ${NGINX_IMAGE}:${NGINX_IMAGE_TAG}
          imagePullPolicy: Always
          env:
          - name: LISTEN_PORT
            value: ${NGINX_LISTEN_PORT}
          resources:
            limits:
              cpu: 800m
              memory: 300Mi
            requests:
              cpu: 500m
              memory: 200Mi
          volumeMounts:
          - name: nginx-config
            mountPath: /nginx.conf
            subPath: nginx.conf
          - name: nginx-cache
            mountPath: /var/cache/nginx
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        volumes:
        - name: nginx-config
          configMap:
            name: ${NGINX_CONFIG_CONFIGMAP}
            defaultMode: 420
            items:
            - key: nginx.conf
              path: nginx.conf
        - name: nginx-cache
          emptyDir: {}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      sentry-component: nginx
      service: sentry
    name: ${NGINX_CONFIG_CONFIGMAP}
  data:
    nginx.conf: |
      daemon off;
      worker_processes 1;

      error_log /dev/stderr;
      pid /tmp/nginx.pid;


      events {
        worker_connections 1024;
      }


      http {
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /dev/stdout main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        reset_timedout_connection on;

        keepalive_timeout 75s;

        gzip off;
        server_tokens off;

        server_names_hash_bucket_size 64;
        types_hash_max_size 2048;
        types_hash_bucket_size 64;
        client_max_body_size 100m;

        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_buffering off;
        proxy_next_upstream error timeout invalid_header http_502 http_503 non_idempotent;
        proxy_next_upstream_tries 2;

        # Remove the Connection header if the client sends it,
        # it could be "close" to close a keepalive connection
        proxy_set_header Connection '';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-Id $request_id;
        proxy_read_timeout 30s;
        proxy_send_timeout 5s;

        upstream relay {
          server ${RELAY_SERVICE}:${RELAY_SERVICE_PORT};
        }

        upstream sentry {
          server ${SENTRY_SERVICE}:${SENTRY_SERVICE_PORT};
        }

        server {
          listen *:${LISTEN_PORT};

          location /api/store/ {
            proxy_pass http://relay;
          }
          location ~ ^/api/[1-9]\d*/ {
            proxy_pass http://relay;
          }
          location / {
            proxy_pass http://sentry;
          }
        }
      }
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      sentry-component: nginx
      service: sentry
    name: ${NGINX_SERVICE}
  spec:
    type: ClusterIP
    ports:
    - name: http
      port: ${{NGINX_SERVICE_PORT}}
      protocol: TCP
      targetPort: ${{NGINX_LISTEN_PORT}}
    selector:
      sentry-task: nginx
    sessionAffinity: None

# Snuba
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: snuba-api
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: snuba-api
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: snuba-api
      spec:
        containers:
        - name: snuba-api
          image: ${SNUBA_IMAGE}:${SNUBA_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - snuba
          - api
          env:
          - name: SNUBA_SETTINGS
            value: docker
          - name: CLICKHOUSE_HOST
            value: ${CLICKHOUSE_SERVICE} 
          - name: CLICKHOUSE_PORT
            value: ${CLICKHOUSE_SERVICE_PORT}
          - name: DEFAULT_BROKERS
            valueFrom:
              secretKeyRef:
                name: ${KAFKA_SECRET}
                key: bootstrapServerHost
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: ${SNUBA_API_SERVICE}
  spec:
    type: ClusterIP
    ports:
    - port: ${{SNUBA_API_SERVICE_PORT}}
      protocol: TCP
      targetPort: 1218
    selector:
      sentry-task: snuba-api
    sessionAffinity: None
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: snuba-consumer
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: snuba-consumer
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: snuba-consumer
      spec:
        containers:
        - name: snuba-consumer
          image: ${SNUBA_IMAGE}:${SNUBA_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - snuba
          - consumer
          - --storage=events
          - --auto-offset-reset=latest
          - --max-batch-time-ms=750
          env:
          - name: SNUBA_SETTINGS
            value: docker
          - name: CLICKHOUSE_HOST
            value: ${CLICKHOUSE_SERVICE} 
          - name: CLICKHOUSE_PORT
            value: ${CLICKHOUSE_SERVICE_PORT}
          - name: DEFAULT_BROKERS
            valueFrom:
              secretKeyRef:
                name: ${KAFKA_SECRET}
                key: bootstrapServerHost
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: snuba-outcomes-consumer
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: snuba-outcomes-consumer
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: snuba-outcomes-consumer
      spec:
        containers:
        - name: snuba-outcomes-consumer
          image: ${SNUBA_IMAGE}:${SNUBA_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - snuba
          - consumer
          - --storage=outcomes_raw
          - --auto-offset-reset=earliest
          - --max-batch-time-ms=750
          env:
          - name: SNUBA_SETTINGS
            value: docker
          - name: CLICKHOUSE_HOST
            value: ${CLICKHOUSE_SERVICE} 
          - name: CLICKHOUSE_PORT
            value: ${CLICKHOUSE_SERVICE_PORT}
          - name: DEFAULT_BROKERS
            valueFrom:
              secretKeyRef:
                name: ${KAFKA_SECRET}
                key: bootstrapServerHost
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: snuba-sessions-consumer
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: snuba-sessions-consumer
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: snuba-sessions-consumer
      spec:
        containers:
        - name: snuba-sessions-consumer
          image: ${SNUBA_IMAGE}:${SNUBA_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - snuba
          - consumer
          - --storage=sessions_raw
          - --auto-offset-reset=latest
          - --max-batch-time-ms=750
          env:
          - name: SNUBA_SETTINGS
            value: docker
          - name: CLICKHOUSE_HOST
            value: ${CLICKHOUSE_SERVICE} 
          - name: CLICKHOUSE_PORT
            value: ${CLICKHOUSE_SERVICE_PORT}
          - name: DEFAULT_BROKERS
            valueFrom:
              secretKeyRef:
                name: ${KAFKA_SECRET}
                key: bootstrapServerHost
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: snuba-transactions-consumer
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: snuba-transactions-consumer
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: snuba-transactions-consumer
      spec:
        containers:
        - name: snuba-transactions-consumer
          image: ${SNUBA_IMAGE}:${SNUBA_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - snuba
          - consumer 
          - --storage=transactions
          - --consumer-group=transactions_group
          - --auto-offset-reset=latest
          - --max-batch-time-ms=750
          - --commit-log-topic=snuba-commit-log
          env:
          - name: SNUBA_SETTINGS
            value: docker
          - name: CLICKHOUSE_HOST
            value: ${CLICKHOUSE_SERVICE} 
          - name: CLICKHOUSE_PORT
            value: ${CLICKHOUSE_SERVICE_PORT}
          - name: DEFAULT_BROKERS
            valueFrom:
              secretKeyRef:
                name: ${KAFKA_SECRET}
                key: bootstrapServerHost
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: snuba-replacer
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: snuba-replacer
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: snuba-replacer
      spec:
        containers:
        - name: snuba-replacer
          image: ${SNUBA_IMAGE}:${SNUBA_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - snuba
          - replacer
          - --storage=events
          - --auto-offset-reset=latest
          - --max-batch-size=3
          env:
          - name: SNUBA_SETTINGS
            value: docker
          - name: CLICKHOUSE_HOST
            value: ${CLICKHOUSE_SERVICE} 
          - name: CLICKHOUSE_PORT
            value: ${CLICKHOUSE_SERVICE_PORT}
          - name: DEFAULT_BROKERS
            valueFrom:
              secretKeyRef:
                name: ${KAFKA_SECRET}
                key: bootstrapServerHost
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: snuba-subscription-consumer-events
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: snuba-subscription-consumer-events
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: snuba-subscription-consumer-events
      spec:
        containers:
        - name: snuba-subscription-consumer-events
          image: ${SNUBA_IMAGE}:${SNUBA_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - snuba
          - subscriptions
          - --auto-offset-reset=latest
          - --consumer-group=snuba-events-subscriptions-consumers
          - --topic=events
          - --result-topic=events-subscription-results
          - --dataset=events
          - --commit-log-topic=snuba-commit-log
          - --commit-log-group=snuba-consumers
          - --delay-seconds=60
          - --schedule-ttl=60
          env:
          - name: SNUBA_SETTINGS
            value: docker
          - name: CLICKHOUSE_HOST
            value: ${CLICKHOUSE_SERVICE} 
          - name: CLICKHOUSE_PORT
            value: ${CLICKHOUSE_SERVICE_PORT}
          - name: DEFAULT_BROKERS
            valueFrom:
              secretKeyRef:
                name: ${KAFKA_SECRET}
                key: bootstrapServerHost
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: snuba
      service: sentry
    name: snuba-subscription-consumer-transactions
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: snuba-subscription-consumer-transactions
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: snuba-subscription-consumer-transactions
      spec:
        containers:
        - name: snuba-subscription-consumer-transactions
          image: ${SNUBA_IMAGE}:${SNUBA_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - snuba
          - subscriptions
          - --auto-offset-reset=latest
          - --consumer-group=snuba-transactions-subscriptions-consumers
          - --topic=events
          - --result-topic=transactions-subscription-results
          - --dataset=transactions
          - --commit-log-topic=snuba-commit-log
          - --commit-log-group=transactions_group
          - --delay-seconds=60
          - --schedule-ttl=60
          env:
          - name: SNUBA_SETTINGS
            value: docker
          - name: CLICKHOUSE_HOST
            value: ${CLICKHOUSE_SERVICE} 
          - name: CLICKHOUSE_PORT
            value: ${CLICKHOUSE_SERVICE_PORT}
          - name: DEFAULT_BROKERS
            valueFrom:
              secretKeyRef:
                name: ${KAFKA_SECRET}
                key: bootstrapServerHost
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: endpoint
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${REDIS_SECRET}
                key: auth_token
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}

# Symbolicator
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      sentry-component: symbolicator
      service: sentry
    name: symbolicator
  spec:
    replicas: 1
    selector:
      matchLabels:
        sentry-task: symbolicator
    progressDeadlineSeconds: 600
    revisionHistoryLimit: 10
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    template:
      metadata:
        labels:
          sentry-task: symbolicator
      spec:
        containers:
        - name: symbolicator
          image: ${SYMBOLICATOR_IMAGE}:${SYMBOLICATOR_IMAGE_TAG}
          imagePullPolicy: Always
          command:
          - symbolicator
          - run
          - -c
          - /etc/symbolicator/config.yml
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          volumeMounts:
          - name: symbolicator-cache
            mountPath: /data
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        volumes:
        - name: symbolicator-cache
          emptyDir: {}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
#        serviceAccountName: ${SERVICE_ACCOUNT}
parameters:
- name: IMAGE
  value: quay.io/app-sre/sentry
  displayName: sentry image
  description: sentry container image. Defaults to quay.io/app-sre/sentry
- name: IMAGE_TAG
  value: latest
  displayName: sentry image tag
  description: sentry image tag which defaults to latest
- name: CLEANUP_DAYS
  value: "14"
  displayName: sentry cleanup interval
  description: how many days of data should be kept in the sentry database
#- name: SERVICE_ACCOUNT
#  value: sentry
#  deplayName: sentry service account
#  description: name of the service account to use when deploying the pod
- name: SENTRY_SINGLE_ORGANIZATION
  value: "true"
  deplayName: sentry single organization
  description: should sentry be deployed with a single organization configuration
- name: SNUBA_API_SERVICE
  value: snuba-api
  displayName: sentry snuba api service
  description: name of the snuba api service
- name: SNUBA_API_SERVICE_PORT
  value: "1218"
  displayName: sentry snuba api port
  description: port of the snuba api service
- name: SENTRY_SERVICE
  value: sentry-web
  displayName: sentry web service name
  description: name of the sentry web service
- name: SENTRY_SERVICE_PORT
  value: "9000"
  displayName: sentry web service port
  description: port the sentry web service listens on for connections
- name: KAFKA_SERVICE
  value: sentry-kafka
  displayName: kafka service name
  description: name of the kafka service
- name: KAFKA_SERVICE_PORT
  value: "9092"
  displayName: kafka port
  description: port number kafka listens on for client connections
- name: RELAY_CREDENTIALS_SECRET
  value: relay
  displayName: relay credentials file
  description: name of the secret containing the relay credentials file
- name: RELAY_CONFIG_CONFIGMAP
  value: relay-config
  displayName: relay config file
  description: name of the config map containing the relay config file
- name: RELAY_SERVICE
  value: relay
  displayName: sentry relay service name
  description: name of the sentry relay service
- name: RELAY_SERVICE_PORT
  value: "3000"
  displayName: sentry relay service port
  description: port the sentry relay service listens on for connections
- name: NGINX_IMAGE
  value: quay.io/app-sre/nginx-gate
  displayName: nginx image
  description: nginx container image. Defaults to quay.io/app-sre/nginx-gate
- name: NGINX_IMAGE_TAG
  value: "32317a8"
  displayName: nginx image tag
  description: nginx image tag to use
- name: NGINX_CONFIG_CONFIGMAP
  value: nginx-config
  displayName: nginx config map
  description: name of config map that holds the configuration for nginx
- name: NGINX_SERVICE
  value: sentry-nginx
  displayName: nginx service name
  description: name of the nginx service
- name: NGINX_SERVICE_PORT
  value: "9000"
  displayName: nginx service port
  description: port the nginx service listens on for connections
- name: NGINX_LISTEN_PORT
  value: "8000"
  displayName: nginx listen port
  description: port the nginx container will listen on
- name: CLICKHOUSE_SERVICE
  value: clickhouse
  displayName: clickhouse service name
  description: name of the clickhouse service
- name: CLICKHOUSE_SERVICE_PORT
  value: "9000"
  displayName: clickhouse service port
  description: port the clickhouse service listens on for connections
- name: CLICKHOUSE_CONFIG_CONFIGMAP
  value: clickhouse
  displayName: clickhouse config map name
  description: name of the config map containing the configuration for clickhouse
- name: REDIS_SECRET
  value: redis
  displayName: redis config secret
  description: name of the secret containing the redis configuration parameters
- name: SNUBA_IMAGE
  value: quay.io/app-sre/snuba
  displayName: snuba image
  description: snuba container image. Defaults to quay.io/app-sre/snuba
- name: SNUBA_IMAGE_TAG
  value: latest
  displayName: snuba image tag
  description: snuba image tag which defaults to latest
- name: SYMBOLICATOR_IMAGE
  value: quay.io/app-sre/symbolicator
  displayName: symbolicator image
  description: symbolicator container image. Defaults to quay.io/app-sre/symbolicator
- name: SYMBOLICATOR_IMAGE_TAG
  value: latest
  displayName: symbolicator image tag
  description: symbolicator image tag which defaults to latest
- name: KAFKA_SECRET
  value: kafka
  displayName: kafka secret name
  description: name of the secret containing kafka server information
- name: RELAY_IMAGE
  value: quay.io/app-sre/relay
  displayName: relay image
  description: sentry relay container image. Defaults to quay.io/app-sre/relay
- name: RELAY_IMAGE_TAG
  value: latest
  displayName: sentry relay image tag
  description: sentry relay image tag which defaults to latest
- name: REDIS_SERVICE
  value: redis
  displayName: redis service name
  description: name of the redis service
- name: REDIS_SERVICE_PORT
  value: "6379"
  displayName: redis port
  description: port number redis listens on for client connections
- name: SENTRY_SERVICE
  value: sentry-web
  displayName: sentry web service name
  description: name of the sentry web service
- name: SENTRY_SERVICE_PORT
  value: "9000"
  displayName: sentry web service port
  description: port the sentry web service listens on for connections
- name: RELAY_SERVICE
  value: sentry-relay
  displayName: sentry relay service name
  description: name of the sentry relay service
- name: RELAY_SERVICE_PORT
  value: "3000"
  displayName: sentry relay service port
  description: port the sentry relay service listens on for connections
